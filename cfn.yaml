AWSTemplateFormatVersion: 2010-09-09
Description: subscribe-with-google
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  Subnets:
    Type: CommaDelimitedList
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Default: subnet-cb91ae8d, subnet-a7b74ac2, subnet-179e8063
  Stack:
    Description: Applied directly as a tag
    Type: String
    Default: support
  Stage:
    Description: Applied directly as a tag
    Type: String
  App:
    Description: Applied directly as a tag
    Type: String
    Default: subscribe-with-google
  AMI:
    Description: AMI ID
    Type: String
    Default: ami-021e99cf3f971f8b0
  OfficeCIDR:
    Description: Office IP range
    Type: String
    Default: 77.91.248.0/21
  CertificateARN:
    Description: SSL Certificate
    Type: String

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: true
        - Key: App
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ev
            aws s3 cp s3://membership-dist/support/${Stage}/${App}/${App}_1.0_all.deb /tmp
            export INSTANCE_ID=$(hostname -i)
            dpkg -i /tmp/${App}_1.0_all.deb
            subscribe-with-google

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ConfigLoad
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:GetParametersByPath
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}/${Stage}
        - PolicyName: DescribeTags
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:DescribeTags
                Resource: "*"
        - PolicyName: DescribeAutoScaling
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeAutoScalingGroups
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stack}-${Stage}-subs-with-google
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App
        - Key: Stage
          Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
        - CertificateArn: !Ref CertificateARN
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stack}-${Stage}-subs-with-google
      Port: 9233
      Protocol: HTTP
      VpcId:
        Ref: VpcId
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: 9233
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 45 # only connection drains for 45 seconds (rather than default of 300)
    DependsOn:
    - ElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9233
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref OfficeCIDR
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "google-pub-sub-${Stage}"

  SQSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "api-gateway-google-pub-sub-sqs-access-${Stage}-role"
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: api-gateway-google-pub-sub-sqs-access-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource: !GetAtt SQSQueue.Arn

  MessageApiAuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MessageApiAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SECRET_KEY: !Sub '{{resolve:secretsmanager:subscribe_with_google_pub_sub_${Stage}:SecretString:secret_key}}'
      Code:
        ZipFile: !Sub >
          function generatePolicy(effect, resource) {
            return {
              principalId: 'user',
              policyDocument: {
                Version: '2012-10-17',
                Statement: [{
                  Action: 'execute-api:Invoke',
                  Effect: effect,
                  Resource: resource
                }]
              }
            };
          }

          exports.handler = (event, context, cb) => {
            const secret = event.queryStringParameters.secret;
            if (secret == process.env.SECRET_KEY) {
              cb(null, generatePolicy('Allow', event.methodArn));
            } else {
              cb(null, generatePolicy('Deny', event.methodArn));
            }
          }
      Handler: index.handler
      Role: !GetAtt MessageApiAuthLambdaRole.Arn
      Runtime: nodejs8.10

  MessageApiAuthorizeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action: lambda:invokeFunction
              Resource: !GetAtt MessageApiAuthLambda.Arn

  MessageApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt MessageApiAuthorizeRole.Arn
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/20  15-03-31/functions/${MessageApiAuthLambda.Arn}/invocations
      IdentitySource: method.request.querystring.secret
      Name: api-gateway-google-pub-sub-api-authorizer
      RestApiId: !Ref MessageApi
      Type: REQUEST

  MessageApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "google-pub-sub-api-${Stage}"
      Description: Receives notifications from Google Pub Sub. Currently used by Subscribe with Google.

  MessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: "message"
      RestApiId: !Ref "MessageApi"
      ParentId: !GetAtt MessageApi.RootResourceId

  ReceiveMessageMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: SQSQueue
    Properties:
      RestApiId: !Ref "MessageApi"
      ResourceId: !Ref "MessageResource"
      HttpMethod: POST
      MethodResponses:
        - StatusCode: 200
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MessageApiAuthorizer
      Integration:
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//${AWS::AccountId}/google-pub-sub-${Stage}"
        Credentials: !GetAtt "SQSRole.Arn"
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.querystring.Action: "'SendMessage'"
          integration.request.querystring.MessageBody: method.request.body
