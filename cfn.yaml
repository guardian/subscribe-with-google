AWSTemplateFormatVersion: 2010-09-09
Description: subscribe-with-google
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  PrivateVpcSubnets:
    Description: Private subnets to use for EC2 instances
    Type: List<AWS::EC2::Subnet::Id>
  PublicVpcSubnets:
    Description: Public subnets to use for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  Stack:
    Description: Applied directly as a tag
    Type: String
    Default: support
  Stage:
    Description: Applied directly as a tag
    Type: String
  App:
    Description: Applied directly as a tag
    Type: String
    Default: subscribe-with-google
  AMI:
    Description: AMI ID
    Type: String
  OfficeCIDR:
    Description: Office IP range
    Type: String
    Default: 77.91.248.0/21
  CertificateARN:
    Description: SSL Certificate
    Type: String

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateVpcSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: true
        - Key: App
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: t3.micro
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ev
            aws s3 cp s3://membership-dist/support/${Stage}/${App}/${App}_1.0_all.deb /tmp
            export INSTANCE_ID=$(hostname -i)
            dpkg -i /tmp/${App}_1.0_all.deb
            /opt/cloudwatch-logs/configure-logs application ${Stack} ${Stage} ${App} /var/log/${App}/application.log
            subscribe-with-google

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ConfigLoad
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:GetParametersByPath
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}/${Stage}
        - PolicyName: DescribeTags
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:DescribeTags
                Resource: "*"
        - PolicyName: DescribeAutoScaling
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeAutoScalingGroups
                Resource: "*"
        - PolicyName: SqsMessages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:google-pub-sub-queue-${Stage}

        - PolicyName: PushMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt SubscribeWithGoogleLogGroup.Arn


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stack}-${Stage}-subs-with-google
      Subnets: !Ref PublicVpcSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App
        - Key: Stage
          Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
        - CertificateArn: !Ref CertificateARN
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stack}-${Stage}-subs-with-google
      Port: 9233
      Protocol: HTTP
      VpcId:
        Ref: VpcId
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: 9233
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 45 # only connection drains for 45 seconds (rather than default of 300)
    DependsOn:
    - ElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9233
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref OfficeCIDR
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  SubscribeWithGoogleLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Stack}-${App}-${Stage}
      RetentionInDays: 14

