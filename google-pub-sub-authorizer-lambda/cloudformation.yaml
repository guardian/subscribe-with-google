AWSTemplateFormatVersion: 2010-09-09
Description: google-pub-sub-api
Parameters:
  Stage:
    Type: String
  Stack:
    Type: String
    Default: support
  App:
    Type: String
    Default: google-pub-sub-authorizer
Resources:
  SQSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "api-gateway-google-pub-sub-sqs-access-${Stage}-role"
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: api-gateway-google-pub-sub-sqs-access-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource: !GetAtt SQSQueue.Arn

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "google-pub-sub-queue-${Stage}"

  MessageApiAuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MessageApiAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub google-pub-sub-authorizer-${Stage}
      Environment:
        Variables:
          SECRET_KEY: !Sub '{{resolve:secretsmanager:subscribe_with_google_pub_sub_${Stage}:SecretString:secret_key}}'
      Code:
        S3Bucket: membership-dist
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.zip
      Handler: index.handler
      Role: !GetAtt MessageApiAuthLambdaRole.Arn
      Runtime: nodejs10.x

  MessageApiAuthorizeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action: lambda:invokeFunction
              Resource: !GetAtt MessageApiAuthLambda.Arn

  MessageApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt MessageApiAuthorizeRole.Arn
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageApiAuthLambda.Arn}/invocations
      IdentitySource: method.request.querystring.secret
      Name: api-gateway-google-pub-sub-api-authorizer
      RestApiId: !Ref MessageApi
      Type: REQUEST

  MessageApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: google-pub-sub-api
      Description: Receives notifications from Google Pub Sub. Currently used by Subscribe with Google.

  MessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: "message"
      RestApiId: !Ref MessageApi
      ParentId: !GetAtt MessageApi.RootResourceId

  ReceiveMessageMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: SQSQueue
    Properties:
      RestApiId: !Ref MessageApi
      ResourceId: !Ref MessageResource
      HttpMethod: POST
      MethodResponses:
        - StatusCode: 200
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MessageApiAuthorizer
      Integration:
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//${AWS::AccountId}/google-pub-sub-queue-${Stage}"
        Credentials: !GetAtt SQSRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.querystring.Action: "'SendMessage'"
          integration.request.querystring.MessageBody: method.request.body

  MessageApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref MessageApi
      DeploymentId: !Ref MessageApiDeployment
      StageName: !Sub ${Stage}

  MessageApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MessageApi
    DependsOn: ReceiveMessageMethod

  MessageApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        # *.support.guardianapis.com
        !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/b384a6a0-2f54-4874-b99b-96eeff96c009
      DomainName: google-pub-sub.support.guardianapis.com
      EndpointConfiguration:
        Types:
          - REGIONAL

  MessageApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId: !Ref MessageApi
      BasePath: !Sub ${Stage}
      DomainName: !Ref MessageApiDomainName
      Stage: !Ref MessageApiStage

  MessageApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: support.guardianapis.com.
      Name: google-pub-sub.support.guardianapis.com
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt MessageApiDomainName.RegionalDomainName
